{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass UploadTaskSnapshotCompat {\n  constructor(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  get bytesTransferred() {\n    return this._delegate.bytesTransferred;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get state() {\n    return this._delegate.state;\n  }\n\n  get totalBytes() {\n    return this._delegate.totalBytes;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass UploadTaskCompat {\n  constructor(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n\n  get snapshot() {\n    return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n\n  then(onFulfilled, onRejected) {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\n      }\n    }, onRejected);\n  }\n\n  on(type, nextOrObserver, error, completed) {\n    let wrappedNextOrObserver = undefined;\n\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = taskSnapshot => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? taskSnapshot => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)) : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  }\n\n}\n\nclass ListResultCompat {\n  constructor(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  get prefixes() {\n    return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\n  }\n\n  get items() {\n    return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\n  }\n\n  get nextPageToken() {\n    return this._delegate.nextPageToken || null;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ReferenceCompat {\n  constructor(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  get name() {\n    return this._delegate.name;\n  }\n\n  get bucket() {\n    return this._delegate.bucket;\n  }\n\n  get fullPath() {\n    return this._delegate.fullPath;\n  }\n\n  toString() {\n    return this._delegate.toString();\n  }\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n\n\n  child(childPath) {\n    const reference = _getChild(this._delegate, childPath);\n\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root() {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n  /**\r\n   * @returns A reference to the parent of the\r\n   * current object, or null if the current object is the root.\r\n   */\n\n\n  get parent() {\n    const reference = this._delegate.parent;\n\n    if (reference == null) {\n      return null;\n    }\n\n    return new ReferenceCompat(reference, this.storage);\n  }\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  put(data, metadata) {\n    this._throwIfRoot('put');\n\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  }\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  putString(value, format = StringFormat.RAW, metadata) {\n    this._throwIfRoot('putString');\n\n    const data = _dataFromString(format, value);\n\n    const metadataClone = Object.assign({}, metadata);\n\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n\n    return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n  }\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n\n\n  listAll() {\n    return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n\n\n  list(options) {\n    return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * A `Promise` that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n\n\n  getMetadata() {\n    return getMetadata(this._delegate);\n  }\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A `Promise` that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n\n\n  updateMetadata(metadata) {\n    return updateMetadata(this._delegate, metadata);\n  }\n  /**\r\n   * @returns A `Promise` that resolves with the download\r\n   * URL for this object.\r\n   */\n\n\n  getDownloadURL() {\n    return getDownloadURL(this._delegate);\n  }\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A `Promise` that resolves if the deletion succeeds.\r\n   */\n\n\n  delete() {\n    this._throwIfRoot('delete');\n\n    return deleteObject(this._delegate);\n  }\n\n  _throwIfRoot(name) {\n    if (this._delegate._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nclass StorageServiceCompat {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  get maxOperationRetryTime() {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime() {\n    return this._delegate.maxUploadRetryTime;\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n\n\n  ref(path) {\n    if (isUrl(path)) {\n      throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n\n\n  refFromURL(url) {\n    if (!isUrl(url)) {\n      throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n\n    try {\n      _Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time) {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time) {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(host, port, options = {}) {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n\n}\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.1.17\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  const storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  const namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"names":["firebase","_getChild","uploadBytesResumable","StringFormat","_dataFromString","_UploadTask","_FbsBlob","listAll","list","getMetadata","updateMetadata","getDownloadURL","deleteObject","_invalidRootOperation","_invalidArgument","ref","_Location","connectStorageEmulator","_TaskState","_TaskEvent","Component","UploadTaskSnapshotCompat","constructor","_delegate","task","bytesTransferred","metadata","state","totalBytes","UploadTaskCompat","_ref","cancel","bind","catch","pause","resume","snapshot","then","onFulfilled","onRejected","on","type","nextOrObserver","error","completed","wrappedNextOrObserver","undefined","taskSnapshot","next","complete","ListResultCompat","_service","prefixes","map","ReferenceCompat","items","nextPageToken","storage","name","bucket","fullPath","toString","child","childPath","reference","root","parent","put","data","_throwIfRoot","putString","value","format","RAW","metadataClone","Object","assign","contentType","r","options","delete","_location","path","StorageServiceCompat","app","maxOperationRetryTime","maxUploadRetryTime","isUrl","refFromURL","url","makeFromUrl","host","e","setMaxUploadRetryTime","time","setMaxOperationRetryTime","useEmulator","port","test","version","STORAGE_TYPE","factory","container","instanceIdentifier","getProvider","getImmediate","storageExp","identifier","storageServiceCompat","registerStorage","instance","namespaceExports","TaskState","TaskEvent","Storage","Reference","INTERNAL","registerComponent","setServiceProps","setMultipleInstances","registerVersion"],"sources":["/Users/thomasbrightly/Documents/tennistraining/node_modules/@firebase/storage-compat/dist/esm/index.esm2017.js"],"sourcesContent":["import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskSnapshotCompat {\r\n    constructor(_delegate, task, ref) {\r\n        this._delegate = _delegate;\r\n        this.task = task;\r\n        this.ref = ref;\r\n    }\r\n    get bytesTransferred() {\r\n        return this._delegate.bytesTransferred;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get state() {\r\n        return this._delegate.state;\r\n    }\r\n    get totalBytes() {\r\n        return this._delegate.totalBytes;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskCompat {\r\n    constructor(_delegate, _ref) {\r\n        this._delegate = _delegate;\r\n        this._ref = _ref;\r\n        this.cancel = this._delegate.cancel.bind(this._delegate);\r\n        this.catch = this._delegate.catch.bind(this._delegate);\r\n        this.pause = this._delegate.pause.bind(this._delegate);\r\n        this.resume = this._delegate.resume.bind(this._delegate);\r\n    }\r\n    get snapshot() {\r\n        return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        return this._delegate.then(snapshot => {\r\n            if (onFulfilled) {\r\n                return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\r\n            }\r\n        }, onRejected);\r\n    }\r\n    on(type, nextOrObserver, error, completed) {\r\n        let wrappedNextOrObserver = undefined;\r\n        if (!!nextOrObserver) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                wrappedNextOrObserver = (taskSnapshot) => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\r\n            }\r\n            else {\r\n                wrappedNextOrObserver = {\r\n                    next: !!nextOrObserver.next\r\n                        ? (taskSnapshot) => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref))\r\n                        : undefined,\r\n                    complete: nextOrObserver.complete || undefined,\r\n                    error: nextOrObserver.error || undefined\r\n                };\r\n            }\r\n        }\r\n        return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\r\n    }\r\n}\n\nclass ListResultCompat {\r\n    constructor(_delegate, _service) {\r\n        this._delegate = _delegate;\r\n        this._service = _service;\r\n    }\r\n    get prefixes() {\r\n        return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get items() {\r\n        return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get nextPageToken() {\r\n        return this._delegate.nextPageToken || null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ReferenceCompat {\r\n    constructor(_delegate, storage) {\r\n        this._delegate = _delegate;\r\n        this.storage = storage;\r\n    }\r\n    get name() {\r\n        return this._delegate.name;\r\n    }\r\n    get bucket() {\r\n        return this._delegate.bucket;\r\n    }\r\n    get fullPath() {\r\n        return this._delegate.fullPath;\r\n    }\r\n    toString() {\r\n        return this._delegate.toString();\r\n    }\r\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\r\n    child(childPath) {\r\n        const reference = _getChild(this._delegate, childPath);\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    get root() {\r\n        return new ReferenceCompat(this._delegate.root, this.storage);\r\n    }\r\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\r\n    get parent() {\r\n        const reference = this._delegate.parent;\r\n        if (reference == null) {\r\n            return null;\r\n        }\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    put(data, metadata) {\r\n        this._throwIfRoot('put');\r\n        return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\r\n    }\r\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    putString(value, format = StringFormat.RAW, metadata) {\r\n        this._throwIfRoot('putString');\r\n        const data = _dataFromString(format, value);\r\n        const metadataClone = Object.assign({}, metadata);\r\n        if (metadataClone['contentType'] == null && data.contentType != null) {\r\n            metadataClone['contentType'] = data.contentType;\r\n        }\r\n        return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\r\n    }\r\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\r\n    listAll() {\r\n        return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\r\n    list(options) {\r\n        return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\r\n    getMetadata() {\r\n        return getMetadata(this._delegate);\r\n    }\r\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\r\n    updateMetadata(metadata) {\r\n        return updateMetadata(this._delegate, metadata);\r\n    }\r\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\r\n    getDownloadURL() {\r\n        return getDownloadURL(this._delegate);\r\n    }\r\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\r\n    delete() {\r\n        this._throwIfRoot('delete');\r\n        return deleteObject(this._delegate);\r\n    }\r\n    _throwIfRoot(name) {\r\n        if (this._delegate._location.path === '') {\r\n            throw _invalidRootOperation(name);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\r\nclass StorageServiceCompat {\r\n    constructor(app, _delegate) {\r\n        this.app = app;\r\n        this._delegate = _delegate;\r\n    }\r\n    get maxOperationRetryTime() {\r\n        return this._delegate.maxOperationRetryTime;\r\n    }\r\n    get maxUploadRetryTime() {\r\n        return this._delegate.maxUploadRetryTime;\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\r\n    ref(path) {\r\n        if (isUrl(path)) {\r\n            throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, path), this);\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\r\n    refFromURL(url) {\r\n        if (!isUrl(url)) {\r\n            throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\r\n        }\r\n        try {\r\n            _Location.makeFromUrl(url, this._delegate.host);\r\n        }\r\n        catch (e) {\r\n            throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, url), this);\r\n    }\r\n    setMaxUploadRetryTime(time) {\r\n        this._delegate.maxUploadRetryTime = time;\r\n    }\r\n    setMaxOperationRetryTime(time) {\r\n        this._delegate.maxOperationRetryTime = time;\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectStorageEmulator(this._delegate, host, port, options);\r\n    }\r\n}\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.1.17\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage-compat';\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    const storageExp = container\r\n        .getProvider('storage')\r\n        .getImmediate({ identifier: url });\r\n    const storageServiceCompat = new StorageServiceCompat(app, storageExp);\r\n    return storageServiceCompat;\r\n}\r\nfunction registerStorage(instance) {\r\n    const namespaceExports = {\r\n        // no-inline\r\n        TaskState: _TaskState,\r\n        TaskEvent: _TaskEvent,\r\n        StringFormat,\r\n        Storage: StorageServiceCompat,\r\n        Reference: ReferenceCompat\r\n    };\r\n    instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterStorage(firebase);\n\nexport { registerStorage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}